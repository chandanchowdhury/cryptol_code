/*
The program takes as input arguments the ciphertext c, the secret (private) key (p, q) – the factors of the RSA modulus n = pq – and the public key (n, e) – note that n is redundant since you already have p and q – and computes all the necessary parameters for decryption of the ciphertext. Note here that a multiplicative inverse should be computed using the Extended Euclidean Algorithm. The program should output the decrypted plaintext p.

The program accomplishes any exponentiations using the efficient square-and-multiply algorithm discussed in class (and presented in section 7.4 of the textbook).

The program uses the Chinese-remainder-theorem decryption method (presented in section 7.5.2 of the textbook) for accelerating decryption.

Ref: https://www.di-mgt.com.au/crt_rsa.html
phi = (p-1) * (q-1)
d = e % phi
dP = (1/e) mod (p-1)
dQ = (1/e) mod (q-1)
qInv = (1/q) mod p
*/

gcd a b = if(b == 0) then a
          else gcd b (a%b)

lcm a b = a * b / gcd a b


findTrue rems m i = n
  where
    n = if rems @ i == 1 then i+1
        | i < m then findTrue rems m (i+1)
        else error "Inverse not found"


MultiplicativeInverse v (m:[4096]) = n
  where
    n = findTrue rems m 0
    rems = [ (i*v) % m | i <- [1 ... ] ]

/*
Test Case Parameter
p = 137
q = 131
e = 3
d = 11787
m = 513
*/

/*
c = 513 ^^ 3 mod n = 8363

RSAEncrypt 137 131 3 513
*/

RSAEncrypt (p:[4096]) (q:[4096]) (e:[4096]) (m:[4096]) = m ^^ e % (p*q)


/*
RSADecrypt (p:[4096]) (q:[4096]) (d:[4096]) (c:[4096]) = m where
RSADecrypt p q d c = m where

dP = e-1 mod (p-1) = d mod (p-1) = 11787 mod 136 = 91
dQ = e-1 mod (q-1) = d mod (q-1) = 11787 mod 130 = 87
qInv = q^-1 mod p = 131^-1 mod 137 = 114
m1 = c^dP mod p = 836391 mod 137 = 102
m2 = c^dQ mod q = 836387 mod 131 = 120
h = qInv.(m1 - m2) mod p = 114.(102-120+137) mod 137 = 3 [we add in an extra p here to keep the sum positive]
m = m2 + h.q = 120 + 3.131 = 513. 


RSADecrypt 137 131 11787 8363

RSADecrypt 137 131 3 8363
*/

RSADecrypt (p:[4096]) (q:[4096]) (:[4096]) (c:[4096]) = d where
    phi = (p-1) * (q-1)
    d = MultiplicativeInverse phi e
    dp = d % (p-1)
    dq = d % (q-1)
    qi = MultiplicativeInverse q p
    m1 = (c^^dp) % p
    m2 = (c^^dq) % q    
    h = if m1 > m2 then (qi * (m1-m2)) % p else (qi * (m1-m2+p)) % p
    m = m2 + (h * q)
    /*m = c ^^ d % (p*q)*/
