module Chandan::utilities where


/*
gcd (7469, 2465)
*/

/* gcd : ([56], [56]) -> [56] */
gcd (l, r) = d where
    d = if r == 0 then l
         | r > l then gcd (r, l)
        else gcd (l - r, r)

/*findTrue : {rems, m, i} (fin rems, fin m, fin i, m >= 1, i >= 1, i<=m) => [inf][m] -> [i] -> [i] -> [i]*/
/* findTrue: [inf] -> [4096] -> [4096] -> [4096] */
findTrue rems m i = n
  where
    n = if rems @ i == 1 then i+1
        | i <= m then findTrue rems m (i+1)
        else error "Inverse not found"


MultiplicativeInverse v (m:[4096]) = n
  where
    n = findTrue rems m 0
    rems = [ (i*v) % m | i <- [1 ... ] ]


type GF28  = [8]

gf28irreducible = <| x^^8 + x^^4 + x^^3 + x + 1 |>

gf28Mult : (GF28, GF28) -> GF28
gf28Mult (x, y) = pmod (pmult x y) gf28irreducible

gf28Pow (n, k) = pow k
    where
        sq x  = gf28Mult (x, x)
        odd x = x ! 0
        pow i = if i == 0 then 1
                else if odd i
                     then gf28Mult (n, sq (pow (i >> 1)))
                     else sq (pow (i >> 1))

gf28Inverse x = gf28Pow (x, 254:[8])